<!-- 
  references https://developer.mozilla.org/en-US/docs/Web/CSS/animation 

@Daniel Gomes de Almeida Filho
tem ambiguidade na frase:
Insira o percentual de vezes que a nota de R$ 100 deverá aparecer do lado esquerdo.

Se 20% for atribuido ao percentual, então a nota de 100 reais deverá aparecer 20% das rodadas do lado esquerdo?



Como eu calculo o percentual de vezes?
Pelo codigo fonte no matlab o percentual refere-se ao pool, ao inves do numero de rodadas. Porque?

nBol tem que ser  o numero de rodadas

-->
<!DOCTYPE html>
<html>
<head>
  <title>Mental Load - Money - Play</title>
  <link rel="stylesheet" href="/css/styles.css">  
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="/js/timer.js"></script>

</head>
<body>
  <div id="console" class="console">
    <h1>Jogo</h1>        
  
    <div id="result-block" style="display:none;">
      <p id="result-message"></p>
      <button class="button" id="result-button" style="display:none;">Resultados</button>
      <button class="button" id="saveButton" style="display:none;">Salvar</button>
      <div id="result-list" style="display:none;">
        <ul id="items-list" style="list-style:none;margin-left:-3%;"></ul>
        <p id="max"></p>
        <p id="wins"></p>
        <p id="lefts"></p>
        <p id="interval"></p>
      </div>      
    </div>

    <div id="reset-block" style="display:none;">
      <h3 id="message"></h3>      
      <form action="game" method="post">
        <input type="hidden" name="number" id="number" value=<%= number %>>
        <input type="hidden" name="turns" id="turns" value=<%= turns %>>
        <button class="button" id="game">Reiniciar</button>
      </form>
      <p>Clique para reiniciar</p>      
    </div>

    <div id="buttons" class="buttons">
        <button class="button" id="left" class="button primary">Esquerda</button>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <button class="button" id="right" class="button primary">Direita</button>
    </div>

    <div id="img-display" style="display:none;">
      <img id="prize-image" width="447" src="" alt="Prize Image">
    </div>

    <div id="loader-block" class="loader-block">
      <div id="loader" class="loader"></div>
      <div id="timer" style="display:none;">00:00:00</div>
    </div>      
    <div id="chosen-block" style="text-align:center; display:none">
      <h1 id="choice"></h1>
    </div>
  </div>

  <script>
    $(document).ready(function() {
      // number of rounds to play
      const arr = '<%= arr %>'.split(',');
      const number = '<%= number %>';
      const turns = '<%= turns %>';

      console.log(number);
      console.log(turns);
      console.log(arr);

      var turn = 1;
      var lefts = 0;
      var wins = 0;
      var deltas = [];
      var image = '';

      // Using objects to store pairs
      var results = [];
      startTracking();
      startTimer();


      var timeout = setTimeout(function() {
        stopTimer();
        $('#loader-block').hide();
        $('#loader').hide();
        $('#buttons').hide();

        // $('#return').show();
        $('#message').text('Tempo Encerrado!!');
        $('#reset-block').show();
      },5000);

      // console.log('timer1', timeout);


      $('button').click(function() {
        console.log('turns: ', turn);
        clearTimeout(timeout);
        startTimer();            

        // collect data from time tracking 
        stopTracking();
        console.log('elapsed time', elapsedTime);        
        deltas.push(elapsedTime);
        //
        // Reset Game
        //
        if (this.id == 'game') {
          window.location.href = 'game';
          return;
        }
        // Display results
        if (this.id == 'result-button') {
          $('#img-display').hide();
          $('#prize-image').attr('src','');                
          $('#result-button').hide();
          //$('#saveButton').hide();
          $('#result-list').show();
          return;
        }

        // Save results to csv
        if (this.id == 'saveButton') {
          $('#img-display').hide();
          $('#prize-image').attr('src','');                          
          $('#result-button').hide();
          $('#saveButton').hide();
          console.log('saving csv');
        }
        //
        // Playing Game
        //
        if (this.id == 'left' || this.id == 'right') {                    
          const choice = $(this).attr('id');
          console.log('choice:', choice);
          


          // showing chosen option 
          // $('#choice').text(choice);
          if (choice=='left') {
            
            $('#left').css('background-color', 'blue')
            $('#left').css('border-color', 'blue');
            $('#left').css('color', '#FFF');

            //$('#right').hide();
            $('#right').css('background-color', '#000');
            $('#right').css('border', '#000');

            lefts+=1;

            if (arr[turn-1] == 2) {
              // $('#result-message').text('Perdeu!');
              image = '/images/no-prize.jpeg';
              results.push([choice, 2])
            } else if (arr[turn-1] == 100) {
              image = '/images/prize.jpeg';
              wins+=1;
              results.push([choice, 100]);
              //number-=1;
              //alert(number);
              //$('#result-message').text('Ganhou!');             
              
            }
          } 
          if (choice=='right') {
            $('#right').css('background-color', 'blue')
            $('#right').css('border-color', 'blue');
            $('#right').css('color', '#FFF');

            // $('#left').hide();
            $('#left').css('background-color', '#000');
            $('#left').css('border', '#000');



            if (arr[turn-1] == 2) {
              image = '/images/prize.jpeg';
              wins+=1;
              results.push([choice, 100]);
              //number-=1;
              //alert(number);
              //$('#result-message').text('Ganhou!');             
            } else if (arr[turn-1] == 100) {
              // $('#result-message').text('Perdeu!'); // 100 is not on left array
              image = '/images/no-prize.jpeg'; 
              results.push([choice, 2])
            }
          }
          // $('#chosen-block').show();
          // hiding buttons, timer and image displays
          // $('#buttons').hide();
          $('#img-display').hide();
          $('#prize-image').attr('src','');                
          $('#loader-block').hide();
          $('#loader').hide();



          
          // $.get('/choose?choice=' + choice, function(data) {});
          // console.log('turn: ', turn);
          // console.log('arr: ', arr);
          // console.log('arr:', arr[turn]);
          
         

          // init first timer 600 miliseconds
          setTimeout(function() {
            // showing result image 
            $('#buttons').hide();
            $('#prize-image').attr('src',image);
            $('#img-display').show();
            $('#result-block').show();          

            //
            // End Game
            //
            if (turn-1 == turns) {
              // 
              $('#img-display').hide();
              $('#prize-image').attr('src','');
              $('#buttons').hide();
              $('#loader-block').hide();
              $('#loader').hide();
              $('#result-message').text('Fim de Jogo!');
              results.forEach(function(item,index) {
                console.log('item',item);
                // $('#items-list').append('<li>Rodada ' + parseInt(parseInt(index)+1) + ': ' + item + '</li>');
              });

              // a) Mostrar só o quanto a pessoa ganhou sobre o máximo que ela poderia ter ganhado (número de rodadas x 100).
              $('#max').text('Pontos: ' + (wins*100) + '/' + (turns*100));
              
              // b) Mostrar o aproveitamento percentual quantas vezes ela acertou a nota de 100
              $('#wins').text('Acertos: ' + ((wins/(turns))*100) + '%');
              console.log('wins: ', wins);

              // c) Mostrar quantas vezes ela escolheu o lado esquerdo em percentual
              $('#lefts').text('Total Esquerdas: ' + ((lefts/turns)*100) + '%');
              console.log('%lefts: ',lefts);

              // d) Juntar os tempos de reação de cada rodada para dar o resultado no final
              tot = 0
              deltas.forEach(function(d) {
                tot+=d; 
              });
              $('#interval').text('Duração: ' + tot + 'milisegundos');

              // e) Mostrar uma curva de média deslizante com N = 10 rodadas e step de 1 rodada 
              // em um gráfico em que o X é a rodada e o Y é a percentagem que a pessoa escolheu o lado esquerdo                


              // Sample data (replace this with your actual data)
              var sampleData = []
              results.forEach(function(item,index) {
                sampleData.push({ rodada: index, lado: item[0], valor: item[1], duracao: deltas[index]});
              });
              console.log('sampleData', sampleData);  
              // Event listener for the button click
              const saveButton = document.getElementById("saveButton");
              saveButton.addEventListener("click", function() {
                downloadCSV(sampleData, "results.csv");
              });
              // show result blocks <divs>
              $('#saveButton').show();
              $('#result-button').show();
              $('#result-block').show();
              $('#reset-block').show();
              return;
            }

          
            // init second timer 500 miliseconds
            setTimeout(function() {
              $('#result-block').hide();
              $('#img-display').hide();
              $('#prize-image').attr('src','');
              
              $('#left').css('background-color', '#ddbeae');
              $('#left').css('border-color', '#ddbeae');
              $('#left').css('color' , '#000');

              $('#right').css('background-color', '#ddbeae');
              $('#right').css('border-color', '#ddbeae');
              $('#right').css('color' , '#000');
              //$('#right').show();    
              // $('#left').show();
              $('#buttons').show();

              $('#loader-block').show();
              $('#loader').show();          
              clearTimeout(timeout);                
              resetTimer();
              startTimer();
              startTracking();

              // init first timer 5 seconds
              timeout = setTimeout(function() {
                  stopTimer();
                  $('#loader-block').hide();
                  $('#loader').hide();
                  $('#buttons').hide();
                  $('#reset-block').show();    
              },5000);
            }, 500);
          }, 600);

          turn+=1;          
          return;
        }        
      });  // on button click


      
  
      
  
    }); // document block executes on loading page. //

  </script>

  <script src="/js/tracking.js"></script>

  <script>

    // Function to convert data to CSV format
    function convertToCSV(data) {
      const header = Object.keys(data[0]).join(",") + "\n";
      const rows = data.map(obj => Object.values(obj).join(",")).join("\n");
      return header + rows;
    }
    
    // Function to trigger the download
    function downloadCSV(data, filename) {
      const csvData = convertToCSV(data);
      const blob = new Blob([csvData], { type: "text/csv" });

      // Create a download link
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = filename;

      // Simulate a click on the link to trigger the download
      link.click();

      // Clean up
      URL.revokeObjectURL(link.href);
    }
  </script>
</body>
</html>
